# -*- coding: utf-8 -*-
"""TF-Coursera-Week-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E94MtSXiOgbe5PQMe5KKDh8GBPA-Y7v9
"""

# sanity check for the tensorflowversion of Colab
# import tensorflow as tf
# print(tf.__version__)

# Upgrade to TF 2
# please not that you need to reset the 
# runtimes before importing the new tf
!pip install tensorflow==2.0.0-alpha0

import tensorflow as tf
print(tf.__version__)

# import the keras api inside the tf
import tensorflow.keras as keras
import numpy as np

# load the data and normalize teh data

mnist = tf.keras.datasets.mnist
(training_images, training_labels), (test_images, test_labels) = mnist.load_data()
training_images, test_images = training_images / 255.0, test_images / 255.0

print(training_images.shape)
print(test_images.shape)


training_images = training_images.reshape(60000, 28, 28, 1)
test_images = test_images.reshape(10000, 28, 28, 1)

# defeine the params
image_size = (28, 28, 1)
lr = 0.001

# define the callbacks
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.998):
      print("\nReached 99.8% accuracy so cancelling training!")
      self.model.stop_training = True
      
callbacks = myCallback()

# define a model for binary classification 
model = keras.models.Sequential([
    keras.layers.Conv2D(filters=64, kernel_size=(3,3), 
                        activation='relu', input_shape=image_size),
    keras.layers.MaxPooling2D(pool_size=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation=tf.nn.softmax)
])
# get the model summary
model.summary()

# compile the model with optimizer
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(training_images, training_labels, epochs=20, callbacks=[callbacks])