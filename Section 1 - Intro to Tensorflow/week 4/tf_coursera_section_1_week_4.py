# -*- coding: utf-8 -*-
"""TF-Coursera-Week-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LTYmtAqYaX53Idoa9h9C96PxalhmHfPk
"""

# sanity check for the tensorflowversion of Colab
# import tensorflow as tf
# print(tf.__version__)

# Upgrade to TF 2
# please not that you need to reset the 
# runtimes before importing the new tf
!pip install tensorflow==2.0.0-alpha0

import tensorflow as tf
print(tf.__version__)

# import the keras api inside the tf
import tensorflow.keras as keras
import numpy as np

# keras Image Generator to produce labels
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# library to manage file upload to google colab
from google.colab import files
from keras.preprocessing import image

# download and make a copy in google colab space
import os
import zipfile

# download the data into /tmp google colab space
!wget --no-check-certificate \
    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/horse-or-human.zip \
    -O /tmp/horse-or-human.zip
  
!wget --no-check-certificate \
    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/validation-horse-or-human.zip \
    -O /tmp/validation-horse-or-human.zip
  
local_zip = '/tmp/horse-or-human.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp/horse-or-human')
local_zip = '/tmp/validation-horse-or-human.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp/validation-horse-or-human')
zip_ref.close()

# define the directories
# Directory with our training horse pictures
train_horse_dir = os.path.join('/tmp/horse-or-human/horses')

# Directory with our training human pictures
train_human_dir = os.path.join('/tmp/horse-or-human/humans')

# Directory with our training horse pictures
validation_horse_dir = os.path.join('/tmp/validation-horse-or-human/horses')

# Directory with our training human pictures
validation_human_dir = os.path.join('/tmp/validation-horse-or-human/humans')

# exploring the data
train_horse_names = os.listdir(train_horse_dir)
print(train_horse_names[:10])

train_human_names = os.listdir(train_human_dir)
print(train_human_names[:10])

validation_horse_hames = os.listdir(validation_horse_dir)
print(validation_horse_hames[:10])

validation_human_names = os.listdir(validation_human_dir)
print(validation_human_names[:10])

print('total training horse images:', len(os.listdir(train_horse_dir)))
print('total training human images:', len(os.listdir(train_human_dir)))
print('total validation horse images:', len(os.listdir(validation_horse_dir)))
print('total validation human images:', len(os.listdir(validation_human_dir)))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 4
ncols = 4

# Index for iterating over images
pic_index = 0

# Set up matplotlib fig, and size it to fit 4x4 pics
fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 4)

pic_index += 8
next_horse_pix = [os.path.join(train_horse_dir, fname) 
                for fname in train_horse_names[pic_index-8:pic_index]]
next_human_pix = [os.path.join(train_human_dir, fname) 
                for fname in train_human_names[pic_index-8:pic_index]]

for i, img_path in enumerate(next_horse_pix+next_human_pix):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

# define the arguments
LR = 0.001 # learning rate
steps_per_epoch = 8
epochs = 15
batch_size=128
validation_per_steps = 8
train_dir = '/tmp/horse-or-human/'
valid_dir = '/tmp/validation-horse-or-human/'
image_size = (300, 300, 3)

# defining the train and validation generator based on keras ImageGenerator
train_generator = ImageDataGenerator(rescale=1.0/255)
# validation_generator = ImageDataGenerator(rescale=1.0/255)

train_generator = train_generator.flow_from_directory(
    train_dir, target_size=image_size[:-1], 
    batch_size=batch_size, class_mode='binary')

validation_generator = validation_generator.flow_from_directory(
    valid_dir, target_size=image_size[:-1], 
    batch_size=batch_size, class_mode='binary')

# define a model for binary classification 
model = keras.models.Sequential([
    keras.layers.Conv2D(filters=16, kernel_size=(3,3), 
                        activation='relu', input_shape=image_size),
    keras.layers.MaxPooling2D(pool_size=(2,2)),
    keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'),
    keras.layers.MaxPooling2D(pool_size=(2,2)),
    keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'),
    keras.layers.MaxPooling2D(pool_size=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(512, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])


# get the model summary
model.summary()

# define the optimizer based on the binary classifier
model.compile(loss='binary_crossentropy', 
              optimizer=keras.optimizers.RMSprop(lr=LR),
              metrics=['acc'])

# training based on ImageGenerator data both validation and training
model.fit_generator(train_generator, 
                    steps_per_epoch=steps_per_epoch, 
                    epochs=epochs, 
                    validation_data=validation_generator, 
                    validation_steps=validation_per_steps, verbose=2)

# training based on ImageGenerator data only training
# model.fit_generator(train_generator, 
#                     steps_per_epoch=steps_per_epoch, 
#                     epochs=epochs, verbose=1)

# test data: uploading the image to test

uploaded = files.upload()

for fn in uploaded.keys():
  
  # get the image temporary path in content directory
  path = '/content/' + fn
  img = image.load_img(path, target_size=image_size[:-1])
  # change the shape to a batch size of one
  x = image.img_to_array(img=img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  # get the prediction
  classes = model.predict(images, batch_size=10)
  # print the prediction
  print(classes[0])
  if classes[0] > 0.5:
    print(fn + "is a human")
  else:
    print(fn + "is a horse")

import numpy as np
import random
from tensorflow.keras.preprocessing.image import img_to_array, load_img

# Let's define a new Model that will take an image as input, and will output
# intermediate representations for all layers in the previous model after
# the first.
successive_outputs = [layer.output for layer in model.layers[1:]]
#visualization_model = Model(img_input, successive_outputs)
visualization_model = tf.keras.models.Model(inputs = model.input, outputs = successive_outputs)
# Let's prepare a random input image from the training set.
horse_img_files = [os.path.join(train_horse_dir, f) for f in train_horse_names]
human_img_files = [os.path.join(train_human_dir, f) for f in train_human_names]
img_path = random.choice(horse_img_files + human_img_files)

img = load_img(img_path, target_size=(300, 300))  # this is a PIL image
x = img_to_array(img)  # Numpy array with shape (150, 150, 3)
x = x.reshape((1,) + x.shape)  # Numpy array with shape (1, 150, 150, 3)

# Rescale by 1/255
x /= 255

# Let's run our image through our network, thus obtaining all
# intermediate representations for this image.
successive_feature_maps = visualization_model.predict(x)

# These are the names of the layers, so can have them as part of our plot
layer_names = [layer.name for layer in model.layers]

# Now let's display our representations
for layer_name, feature_map in zip(layer_names, successive_feature_maps):
  if len(feature_map.shape) == 4:
    # Just do this for the conv / maxpool layers, not the fully-connected layers
    n_features = feature_map.shape[-1]  # number of features in feature map
    # The feature map has shape (1, size, size, n_features)
    size = feature_map.shape[1]
    # We will tile our images in this matrix
    display_grid = np.zeros((size, size * n_features))
    for i in range(n_features):
      # Postprocess the feature to make it visually palatable
      x = feature_map[0, :, :, i]
      x -= x.mean()
      x /= x.std()
      x *= 64
      x += 128
      x = np.clip(x, 0, 255).astype('uint8')
      # We'll tile each filter into this big horizontal grid
      display_grid[:, i * size : (i + 1) * size] = x
    # Display the grid
    scale = 20. / n_features
    plt.figure(figsize=(scale * n_features, scale))
    plt.title(layer_name)
    plt.grid(False)
    plt.imshow(display_grid, aspect='auto', cmap='viridis')

# Exercise: Detect the happy and sad faces! 

import tensorflow as tf
import os
import zipfile

from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

DESIRED_ACCURACY = 0.999
image_size = (150, 150, 3)
LR = 0.001 
steps_per_epoch = 8
epochs = 15
batch_size=128
train_dir = "/tmp/h-or-s"

!wget --no-check-certificate \
    "https://storage.googleapis.com/laurencemoroney-blog.appspot.com/happy-or-sad.zip" \
    -O "/tmp/happy-or-sad.zip"

zip_ref = zipfile.ZipFile("/tmp/happy-or-sad.zip", 'r')
zip_ref.extractall("/tmp/h-or-s")
zip_ref.close()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc')>0.999):
      print("\nReached 60% accuracy so cancelling training!")
      self.model.stop_training = True

callbacks = myCallback()

# Commented out IPython magic to ensure Python compatibility.
# get the data and visualize it
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg


train_generator = ImageDataGenerator(rescale=1.0/255)

train_generator = train_generator.flow_from_directory(
    train_dir, target_size=image_size[:-1], 
    batch_size=batch_size, class_mode='binary')
    
# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 4
ncols = 4

# Index for iterating over images
pic_index = 0

# Set up matplotlib fig, and size it to fit 4x4 pics
fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 4)

pic_index += 8
train_happy_dir = os.path.join('/tmp/h-or-s/happy')
train_happy_names = os.listdir(train_happy_dir)
next_happy_pix = [os.path.join(train_happy_dir, fname) 
                for fname in train_happy_names[pic_index-8:pic_index]]

for i, img_path in enumerate(next_happy_pix):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

def train_happy_sad_model():
    # Please write your code only where you are indicated.
    # please do not remove # model fitting inline comments.

    # define a model for binary classification 
    model = keras.models.Sequential([
        keras.layers.Conv2D(filters=16, kernel_size=(3,3), 
                            activation='relu', input_shape=image_size),
        keras.layers.MaxPooling2D(pool_size=(2,2)),
        keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'),
        keras.layers.MaxPooling2D(pool_size=(2,2)),
        keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'),
        keras.layers.MaxPooling2D(pool_size=(2,2)),
        keras.layers.Flatten(),
        keras.layers.Dense(512, activation='relu'),
        keras.layers.Dense(1, activation='sigmoid')
    ])


    # get the model summary
    model.summary()
    
    # define the optimizer based on the binary classifier
    model.compile(loss='binary_crossentropy', 
                  optimizer=keras.optimizers.RMSprop(lr=LR),
                  metrics=['acc'])

    # training based on ImageGenerator data both validation and training
    model.fit_generator(train_generator, 
                        steps_per_epoch=steps_per_epoch, 
                        epochs=epochs, callbacks=[callbacks], verbose=1)

train_happy_sad_model()